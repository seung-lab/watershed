#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -190403614 "Aleksandar Zlateski" 
\author 1172979425 "Sebastian Seung" 
\end_header

\begin_body

\begin_layout Title
A modified watershed transform on graphs
\end_layout

\begin_layout Abstract
The watershed transform is the method of choice for hierarchical image segmentat
ion.
 The intuitive idea about the method comes from geography.
 The standard watershed algorithm and it's applications had been thoroughly
 studied [cite], but can lead to undesirable results in a case of noisy
 data.
 We present a modified (extended) watershed algorithm(s) that can overcome
 the issue of noisy data, and take advantage of the possibly known nature
 of the data to achieve much better results.
 Our algorithm(s) are as efficient as the most efficient regular watershed
 algorithms.
\end_layout

\begin_layout Section

\series bold
Introduction
\end_layout

\begin_layout Standard
The watershed algorithm is widely used for segmenting images (cite), and
 has also been generalized to the partitioning of graphs (cite).

\change_deleted 1172979425 1412601357
 
\change_unchanged
 In this paper we will focus on watershed for affinity graphs, which is
 relevant for the special case of images.
 However our results are applicable to arbitrary graphs.
 
\end_layout

\begin_layout Standard
The standard watershed algorithm produces as many segments as there are
 local minima.
 In a case of noisy data (e.g.
 images) there will be a lot of local minima leading to lots of small segments
 [image].
 A proposed solution to deal with the noisy data is to, instead of applying
 regular watershed, first connected components are applied to the thresholded
 graph, after which marker watershed is performed.
 The number of components will be equal to the number of components of the
 thresholded graph.
 The problem with this approach is that it doesn’t generate a hierarchical
 segmentation - it pre-determines the number of segments.
 Moreover, the same result can be generated from the hierarchy obtained
 with our algorithm by merging segments until we reach the same number of
 segments.
\end_layout

\begin_layout Standard
The standard watershed algorithm produces a set of segments (set of nodes)
 from which we can easily obtain a region graph and a hierarchical segmentation
 (MST of the region graph).
 The edges of the graph connecting the segment are the min-max edges between
 the pairs of the nodes in the two component.
\end_layout

\begin_layout Standard

\series bold
Degeneracy Issue
\end_layout

\begin_layout Standard
We solve the degeneracy problem by assigning a graph node to be part of
 the same segment as the closest node at the edge of the non-minima plateau.
 In the 2D or 3D affinity graph case that would be equal to the closest
 border node by manhattan distance.
 In a case of tie we pick a random segment.
 The details of the algorithm are explained in the Algorithm section.
\end_layout

\begin_layout Standard

\series bold
Extending the Watershed Algorithm
\end_layout

\begin_layout Standard
We extend the watershed algorithm by adding a set of rules about merging
 the original watershed segments.
 Some of the rules can be applied during the initial phase, while the original
 watershed segmentation is computed and thus it doesn’t have any additional
 computational cost.
 Other can be applied on the applied by a single linear pass through the
 region graph.
\end_layout

\begin_layout Standard

\series bold
Introducing Thresholds.
\end_layout

\begin_layout Standard
The first set of extensions we introduce is a set of thresholds.
 Specifically we will introduce the following thresholds.
 High threshold, the edges with the value greater or equal to the high threshold
 value will be collapsed.
 Low threshold - the edges with the value lower than the low threshold will
 never be collapsed.
 Size threshold - if any of the two segments that are connected in the resulting
 region graph are smaller than the size threshold will be merged.
 The order of the merging will be decided by the value of the edges - higher
 values will be merged first.
\end_layout

\begin_layout Standard

\series bold
Arbitrary Properties and Merging Function
\end_layout

\begin_layout Standard
We further extend the watershed algorithm by introducing merging functions
 and properties.
 The function F(a,b), where a and b are the properties of two connected
 segments in the region graph represents the lowest possible value of the
 edge for which the two component should be merged.
 The function F(a,b) has to be strictly non decreasing in order to avoid
 ambiguous results.
 a and b are properties of the two segments (e.g.
 sizes in number of nodes, center of mass, etc..).
 In order to keep the efficiency of the algorithm we require that computing
 the property of the segments created by merging two segments must be done
 in constant time.
 In the case of the size it is a simple sum of two numbers.
\end_layout

\begin_layout Standard

\series bold
Recursive Application (Extending it even further)
\end_layout

\begin_layout Standard
Another approach to deal with the excessive noise is to recursively apply
 the watershed algorithm on the obtained region graph.
 As described our watershed algorithm can be applied to an arbitrary graph,
 and therefore it can be applied on the results of a watershed.
 The approach is especially useful for very noisy data for which we don’t
 have any prior knowledge.
 This approach can be combined with the previously described extensions.
\end_layout

\begin_layout Section

\series bold
Standard algorithm
\end_layout

\begin_layout Standard
We start by describing the standard watershed algorithm on a weighted undirected
 graph 
\begin_inset Formula $G=(V,E,W)$
\end_inset

, where 
\begin_inset Formula $V$
\end_inset

 denotes vertices, 
\begin_inset Formula $E$
\end_inset

 edges, and 
\begin_inset Formula $W:E\rightarrow\mathbb{R}$
\end_inset

 weights.
 The central quantity in the watershed algorithm is the steepest ascent
 graph, defined as follows.
\end_layout

\begin_layout Definition
Given an undirected graph 
\begin_inset Formula $G$
\end_inset

, define the directed graph 
\begin_inset Formula $G'$
\end_inset

 in which each undirected edge of 
\begin_inset Formula $G$
\end_inset

 is replaced by both directed edges between the same vertices.
 The 
\emph on
steepest ascent graph
\emph default
 
\begin_inset Formula $A$
\end_inset

 is a subgraph of 
\begin_inset Formula $G'$
\end_inset

 with the property that each edge of 
\begin_inset Formula $A$
\end_inset

 is an edge of 
\begin_inset Formula $G'$
\end_inset

 with maximal weight of all edges outgoing from the same vertex.
 
\change_inserted -190403614 1415045643

\end_layout

\begin_layout Standard
A directed path in 
\begin_inset Formula $A$
\end_inset

 is a path of steepest ascent, in the sense that every step is along an
 edge with locally maximal weight.
 The steepest descent graph can be defined analogously using edges of minimal
 weight.
 The watershed algorithm is named because a drop of water is imagined to
 take a path of steepest descent on a landscape.
 Either steepest ascent or descent can be used without loss of generality.
\end_layout

\begin_layout Standard
Assuming that 
\begin_inset Formula $G$
\end_inset

 contains no disconnected vertices, each vertex of 
\begin_inset Formula $A$
\end_inset

 will have at least one outgoing edge
\change_inserted -190403614 1415045514
 or one bidirectional edge
\change_deleted -190403614 1415045524
.
\change_inserted -190403614 1415045524
,
\change_unchanged
 and can be assigned to the same segment as any of the vertices pointed
 to by outgoing
\change_inserted -190403614 1415045541
 or bidirectional
\change_unchanged
 edges.
 A vertex with exactly one outgoing edge is assigned to the same segment
 as the vertex at the other end of the edge.
 
\change_inserted -190403614 1415045733

\end_layout

\begin_layout Definition

\change_inserted -190403614 1415045811
A 
\emph on
separatrix vertex
\emph default
 of the steepest ascent graph has more than one outgoing edge.
\end_layout

\begin_layout Definition

\change_deleted -190403614 1415045862
A 
\emph on
plateau
\emph default
 vertex of the steepest ascent graph has more than one outgoing edge and
 no bidirectional edges.
\change_inserted -190403614 1415046155
Separatrix vertices can be assigned to the same segment as any of the vertices
 pointed to by outgoing edges.
 The outgoing edges can be chosen at random, or in some consistent fashion
 by introducing a strict order of the edges.
 (e.g.
 coordinates and direction in the case of volumetric graphs).
 
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
A 
\emph on
plateau
\emph default
 is a connected component of the subgraph of 
\begin_inset Formula $A$
\end_inset

 containing only bidirectional edges.
\end_layout

\begin_layout Remark*
The smallest possible plateau consists of two vertices, with a bidirectional
 edge between them.
\change_inserted -190403614 1415047047

\end_layout

\begin_layout Definition

\change_inserted -190403614 1415047197
A 
\emph on
plateau corner
\emph default
 is a 
\emph on
plateau 
\emph default
vertex with one or more outgoing edges
\emph on
.
\end_layout

\begin_layout Remark*

\change_inserted -190403614 1415046971
Each 
\emph on
local maxima plateau
\emph default
 will be assigned a unique segment.
 All vertices in the 
\emph on
plateau
\emph default
 will be asigned to that segment.
\end_layout

\begin_layout Definition

\change_inserted -190403614 1415047263
A 
\emph on
local maxima plateau 
\emph default
contains no 
\emph on
plateau corners.
 
\end_layout

\begin_layout Definition

\change_inserted -190403614 1415047364
Each 
\emph on
local maxima platau
\emph default
 will be assigned a unique segment.
 The number of segments in the watershed transform will equal to the number
 of 
\emph on
local maxima plateaus
\emph default
.
\end_layout

\begin_layout --Separator--

\change_inserted -190403614 1415047371

\end_layout

\begin_layout Definition

\change_inserted -190403614 1415047421
A 
\emph on
non-maxima plateau 
\emph default
contains at least one 
\emph on
plateau corner
\emph default
.
\end_layout

\begin_layout Definition

\change_inserted -190403614 1415047600
All the vertices 
\emph on
non-maxima plateau 
\emph default
containing exactly one 
\emph on
plateau corner
\emph default
 will be assigned to the same segment as the 
\emph on
plateau corner
\emph default
.
 The vertices in the 
\emph on
non-maxima plateaus
\emph default
 with more than one 
\emph on
plateau corners 
\emph default
will be assigned to the same segment as the nearest 
\emph on
plateau corner
\emph default
 in terms of graph distance.
 (mention ambigious cases)
\end_layout

\begin_layout Lemma

\change_inserted -190403614 1415047654

\emph on
Each vertex in 
\emph default

\begin_inset Formula $A$
\end_inset

 
\emph on
will be assigned to a segment and the total number of segments will be equal
 to the number of 
\emph default
local maxima plateaus
\emph on
.
\change_unchanged

\end_layout

\begin_layout Lemma

\change_deleted -190403614 1415047548
Strongly connected components of 
\begin_inset Formula $G'$
\end_inset

 with more than one vertex are the plateaux of 
\begin_inset Formula $G'$
\end_inset


\end_layout

\begin_layout Remark

\change_deleted -190403614 1415047548
Strongly connected components of 
\begin_inset Formula $G'$
\end_inset

 with one vertex will either be plateau vertices or non-plateau vertices.
\change_unchanged

\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
A 
\emph on
local maximum
\emph default
 is a plateau with no outgoing edges.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
A plateau corner is a vertex of a non maximum plateau that has a directed
 edge towards a vertex outside of that plateau.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Remark
A vertex with more than one outgoing edge is either a plateau vertex or
 belongs to a plateau.
\end_layout

\begin_layout Remark
In the steepest ascent graph there is a path from every vertex to at least
 one local maxima.
\end_layout

\begin_layout Enumerate
Steepest ascent graph.
 
\end_layout

\begin_layout Enumerate
Plateau division.
 
\end_layout

\begin_layout Enumerate
Region graph
\end_layout

\begin_layout Enumerate
hierarchical segmentation
\end_layout

\begin_layout Standard
The algorithm will produce a set of segments 
\begin_inset Formula $S$
\end_inset

 and a mapping function 
\begin_inset Formula $F_{s}:V\to S$
\end_inset

.
 Our algorithm has linear complexity (in number of edges in the graph) and
 resolves the degeneracy issue.
 
\end_layout

\begin_layout Subsection

\series bold
Steepest ascent graph
\end_layout

\begin_layout Standard
The steepest ascent graph 
\begin_inset Formula $A$
\end_inset

 is constructed from 
\begin_inset Formula $G$
\end_inset

 as follows.
 Loop over all edges 
\begin_inset Formula $(u,v)$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
 If the weight of 
\begin_inset Formula $(u,v)$
\end_inset

 is equal to the maximal weight of all edges in 
\begin_inset Formula $G$
\end_inset

 containing 
\begin_inset Formula $u$
\end_inset

, include the edge 
\begin_inset Formula $u\rightarrow v$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

.
 If the weight of 
\begin_inset Formula $(u,v)$
\end_inset

 is equal to the maximal weight of all edges in 
\begin_inset Formula $G$
\end_inset

 containing 
\begin_inset Formula $v$
\end_inset

, include the edge 
\begin_inset Formula $u\leftarrow v$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
If both edges 
\begin_inset Formula $u\rightarrow v$
\end_inset

 and 
\begin_inset Formula $u\leftarrow v$
\end_inset

 are included in 
\begin_inset Formula $A$
\end_inset

, we will refer to them together as a bidirectional edge.
 The edges of any vertex of 
\begin_inset Formula $A$
\end_inset

 can be categorized as outgoing, incoming, or bidirectional with respect
 to that vetex.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/Watershed First Steps.png
	width 10cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\series bold
a
\series default
 Weighted undirected graph 
\series bold
b
\series default
 steepest ascent graph 
\series bold
c
\series default
 Regular plateau vertices (purple) vs.
 corner vertices (pink) 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plateau division
\end_layout

\begin_layout Standard
In the next step we will divide non-maxima plateaus based on the distance.
 Vertices with only bi-directional edges are situated on a plateau (either
 maximal or non-maximal).
 A vertex with a mixture of purely outgoing edges and bi-directional edges
 is defined as a corner of the non-maximal plateaus.
 These vertices will belong to the same segment as any of the vertices on
 the other end of the purely outgoing edges.
 In the following step we locate all the vertices on the corners of non-maximal
 plateaus and for each of them we will pick a single purely outgoing edge
 to keep and remove all the other edges.
 If the vertex has more than one purely outgoing edges we can employ different
 strategies in picking one of the outgoing edges.
 Picking any of the outgoing edges will produce correct watershed transform
 and will correctly deal with the degeneracy case.
 We chose to pick one at random.
 In this step we have assigned the corners of the non-maximal plateaus to
 corresponding segments.
 The modified graph will have the same properties [figure].
 We repeat the procedure until there are no more vertices with both purely
 outgoing and bi-directional edges.
 This procedure can be applied efficiently by simple BFS search through
 the graph [ref explanation?].
\end_layout

\begin_layout Subsection
Segmentation
\end_layout

\begin_layout Standard
The final modified graph [figure 1d] will uniquely define the watershed
 transform.
 The directional edges represent the relation of belonging to the same final
 segment.
 Running connected components [ref] algorithm on the final graph, while
 ignoring the directionality of the edges will give us the final watershed
 transform [figure 1e] with 
\begin_inset Formula $S$
\end_inset

 being the set of connected components and 
\begin_inset Formula $F_{s}$
\end_inset

 being the function that maps a vertex to its connected component
\end_layout

\begin_layout Standard
The method described above needs to visit every edge constant number of
 times, and is therefore linear in the number of edges.
 In the case of affinity graphs, where the number of edges is constant function
 of the number of vertices we get that our method performs in linear time
 on the number of vertices.
\end_layout

\begin_layout Subsection

\series bold
Region Graph
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $S$
\end_inset

 and 
\begin_inset Formula $F_{s}$
\end_inset

, we define the region graph of the segmentation 
\begin_inset Formula $G_{s}=(S,E_{s},W_{s})$
\end_inset

 such that for every 
\begin_inset Formula $e_{s}=\{s_{u},s_{v}\}\in E_{s}$
\end_inset

 there exist an edge 
\begin_inset Formula $e=\{u,v\}\in E$
\end_inset

 in the original graph such that 
\begin_inset Formula $F_{s}(u)=s_{u}$
\end_inset

 and 
\begin_inset Formula $F_{s}(v)=s_{v}$
\end_inset

 and for every other edge 
\begin_inset Formula $e'=\{u',v'\}\in E$
\end_inset

 such that 
\begin_inset Formula $F_{s}(u')=s_{u}$
\end_inset

 and 
\begin_inset Formula $F_{s}(v')=s_{v}$
\end_inset

 it must be true that 
\begin_inset Formula $W(e')\le W(e)$
\end_inset

.
 Furthermore we assign the weight of the edge 
\begin_inset Formula $W'(e_{s})=W(e)$
\end_inset

.
 Note that the region graph is also a weighted graph on which we can recursively
 apply the watershed algorithm.
 More about that in the next section.
 The algorithm for obtaining the region graph is straight forward.
 We consider all original edges connecting vertices in different segments.
 For every pair of segments we keep the edge with the highest value.
 Using a simple hash-map [ref] we can obtain the region graph in 
\begin_inset Formula $O(E)$
\end_inset

.
\end_layout

\begin_layout Standard
Note that the number of segments (watershed domains) in the segmentation
 will be equal to the number of local maxima in the original graph.
 Every watershed domain will have it's local maxima [ref].
 The region graph will have the following interesting property - the edges
 of the region graph will be maximin edges between the local maximas of
 the connected segments.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Subsection
Hierarchical Segmentation
\end_layout

\begin_layout Standard
A hierarchical segmentation is a set of segmentations at different detail
 levels in which the segmentations at coarser detail levels can be produced
 from simple merges of segments from segmentations at ﬁner detail levels.
 Therefore, the segmentations at ﬁner levels are nested with respect to
 those at coarser levels.
 Hierarchical methods have the interesting property of preserving neighboring
 information among segmented regions [ref].
 A hierarchy can be represented with a spanning tree [ref Zahn].
 Starting from the set of segments produced by our watershed transform,
 we create a hierarchical segmentation by finding the maximum cost spanning
 tree of the region graph.
\end_layout

\begin_layout Section
Modified Algorithm
\end_layout

\begin_layout Standard
As the number of watershed domains depends on the number of local maxima
 of the graph, noisy data would produce a large number of small segments.
 In this section we propose a modification of the original watershed algorithm
 that will deal with possible noisy input, as well as, take advantage of
 the prior knowledge of the data.
 We focus on segmenting neural tissue data using affinity graphs obtained
 by CNN [ref], but the approach can be used for other application with little
 or no modification.
\end_layout

\begin_layout Subsection
Min and Max Thresholds
\end_layout

\begin_layout Standard
The edges of affinity graphs represent probabilities of the two nodes belonging
 to same segment.
 As a first and natural modification we introduce Min and Max thresholds.
 Mainly we modify the graph such that all the edges with value 
\begin_inset Formula $W(e)\ge T_{max}$
\end_inset

 get a new value 
\begin_inset Formula $W(e)=\infty$
\end_inset

, and all the edges with 
\begin_inset Formula $W(e)<T_{min}$
\end_inset

 get a new value 
\begin_inset Formula $W(e)=-\infty$
\end_inset

.
 In the case of affinity graphs instead of 
\begin_inset Formula $\infty$
\end_inset

 and 
\begin_inset Formula $-\infty$
\end_inset

 we use 0 and 1.
 This can be done by a single pass through the edges 
\begin_inset Formula $O(E)$
\end_inset

 and therefore does not increase the running time of the original algorithm.
 By applying the Min and Max threshold we flatten the input near the minimal
 and maximal values and reduce the number of local minima.
 As shown on [figure 2] the number of segments dramatically reduces, however
 we still have to deal with the noise between the two threshold values.
\end_layout

\begin_layout Subsection
Size Thresholds
\end_layout

\begin_layout Standard
As in the case of segmenting electron microscopy images of neural tissue,
 quite often we have a prior knowledge about the minimal size of the segments
 in the desired segmentation.
 The voxel in the center of the volume belongs to a neuron either fully
 contained in the volume in which case we can guarantee that the segment
 it belongs to is at least the size of the minimal neuron [figure 3a].
 Alternatively it can belong to a cell partially contained in the volume
 in which case we can guarantee that the minimal size is equal to the distance
 to the edge of the volume times the minimal width of the process [figure
 3b].
\end_layout

\begin_layout Standard
We propose the following simplified modification (or rather extension?)
 of the watershed algorithm in order to produce better segmentation based
 on the prior knowledge about the size of the desired segments.
 We observe the edges of the region graph in decreasing order.
 The higher value of the edge means higher probability of the two segments
 actually belonging to a single larger segment.
 If any of the two segments connected by the observed edge is smaller than
 
\begin_inset Formula $T_{size}$
\end_inset

 we merge the two segments into a new one with the size equal to the sum
 of the sizes of the two segments.
 Further we never consider edges with the value smaller than 
\begin_inset Formula $T_{size,min}$
\end_inset

.
\end_layout

\begin_layout Subsection
Arbitrary Function of an Arbitrary Property Threshold
\end_layout

\begin_layout Subsection
Recursive Application of the Modified Algorithm
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset


\end_layout

\end_body
\end_document
