#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -190403614 "Aleksandar Zlateski" 
\end_header

\begin_body

\begin_layout Title
An extended watershed transform on graphs
\end_layout

\begin_layout Abstract
The watershed transform is the method of choice for hierarchical image segmentat
ion.
 The intuitive idea about the method comes from geography.
 The standard watershed algorithm and it's applications had been thoroughly
 studied [cite], but can lead to undesirable results in a case of noisy
 data.
 We present a modified (extended) watershed algorithm(s) that can overcome
 the issue of noisy data, and take advantage of the possibly known nature
 of the data to achieve much better results.
 Our algorithms are as efficient as the most efficient regular watershed
 algorithms.
\end_layout

\begin_layout Section

\series bold
Introduction
\end_layout

\begin_layout Standard
The watershed algorithm is widely used for segmenting images (cite), and
 has also been generalized to the partitioning of graphs (cite).
 In this paper we will focus on watershed for affinity graphs, which is
 relevant for the special case of images.
 However our results are applicable to arbitrary graphs.
 
\end_layout

\begin_layout Standard
The standard watershed algorithm produces as many segments as there are
 local minima.
 In a case of noisy data (e.g.
 images) there will be a lot of local minima leading to lots of small segments
 [image].
 A proposed solution to deal with the noisy data is to, instead of applying
 regular watershed, first connected components are applied to the thresholded
 graph, after which marker watershed is performed.
 The number of components will be equal to the number of components of the
 thresholded graph.
 The problem with this approach is that it doesn’t generate a hierarchical
 segmentation - it pre-determines the number of segments.
 Moreover, the same result can be generated from the hierarchy obtained
 with our algorithm by merging segments until we reach the same number of
 segments.
\end_layout

\begin_layout Standard
The standard watershed algorithm produces a set of segments (set of nodes)
 from which we can easily obtain a region graph and a hierarchical segmentation
 (MST of the region graph).
 The edges of the graph connecting the segment are the min-max edges between
 the pairs of the nodes in the two component.
\end_layout

\begin_layout Standard

\series bold
Degeneracy Issue
\end_layout

\begin_layout Standard
We solve the degeneracy problem by assigning a graph node to be part of
 the same segment as the closest node at the edge of the non-minima plateau.
 In the 2D or 3D affinity graph case that would be equal to the closest
 border node by manhattan distance.
 In a case of tie we pick a random segment.
 The details of the algorithm are explained in the Algorithm section.
\end_layout

\begin_layout Standard

\series bold
Extending the Watershed Algorithm
\end_layout

\begin_layout Standard
We extend the watershed algorithm by adding a set of rules about merging
 the original watershed segments.
 Some of the rules can be applied during the initial phase, while the original
 watershed segmentation is computed and thus it doesn’t have any additional
 computational cost.
 Other can be applied on the applied by a single linear pass through the
 region graph.
\end_layout

\begin_layout Standard

\series bold
Introducing Thresholds.
\end_layout

\begin_layout Standard
The first set of extensions we introduce is a set of thresholds.
 Specifically we will introduce the following thresholds.
 High threshold, the edges with the value greater or equal to the high threshold
 value will be collapsed.
 Low threshold - the edges with the value lower than the low threshold will
 never be collapsed.
 Size threshold - if any of the two segments that are connected in the resulting
 region graph are smaller than the size threshold will be merged.
 The order of the merging will be decided by the value of the edges - higher
 values will be merged first.
\end_layout

\begin_layout Standard

\series bold
Arbitrary Properties and Merging Function
\end_layout

\begin_layout Standard
We further extend the watershed algorithm by introducing merging functions
 and properties.
 The function F(a,b), where a and b are the properties of two connected
 segments in the region graph represents the lowest possible value of the
 edge for which the two component should be merged.
 The function F(a,b) has to be strictly non decreasing in order to avoid
 ambiguous results.
 a and b are properties of the two segments (e.g.
 sizes in number of nodes, center of mass, etc..).
 In order to keep the efficiency of the algorithm we require that computing
 the property of the segments created by merging two segments must be done
 in constant time.
 In the case of the size it is a simple sum of two numbers.
\end_layout

\begin_layout Standard

\series bold
Recursive Application (Extending it even further)
\end_layout

\begin_layout Standard
Another approach to deal with the excessive noise is to recursively apply
 the watershed algorithm on the obtained region graph.
 As described our watershed algorithm can be applied to an arbitrary graph,
 and therefore it can be applied on the results of a watershed.
 The approach is especially useful for very noisy data for which we don’t
 have any prior knowledge.
 This approach can be combined with the previously described extensions.
\end_layout

\begin_layout Section
Watershed transform definition
\end_layout

\begin_layout Standard
Roughly speaking we want to define the steepest descent stochastic discrete
 dynamics on an undirected weighted graph and then partition the graph into
 the basins of attraction of this dynamics.
 But there are sproblems!
\end_layout

\begin_layout Standard
The vertices of the graph represent the states of our system.
 For a given state 
\begin_inset Formula $u$
\end_inset

 in the next timestep the system evolves into a state 
\begin_inset Formula $u$
\end_inset

if there is an edge 
\begin_inset Formula $\{u,v\}$
\end_inset

 in our graph such that the weight of the edge is not larger than any edge
 containing 
\begin_inset Formula $u$
\end_inset

.
 If there's multiple states satisfying the condition, the system can evolve
 into any of them with equal probability.
\end_layout

\begin_layout Standard
We will have one basin of attraction for each regional minima.
\end_layout

\begin_layout Standard
Problem - stationary points in the dynamics which correspond to non-minima
 plateaus.
\end_layout

\begin_layout Standard
There might be more than one steepest descent path from a vertex going to
 distinct regional minima.
 A vertex can have two basins of attraction.
\end_layout

\begin_layout Standard
We will solve this problem by introducing border vertices.
\end_layout

\begin_layout Standard
Let's describe our stochastic dynamic on the given weighted graph G.
\end_layout

\begin_layout Definition*
A walk 
\begin_inset Formula $v_{0},e_{0},v_{1},e_{1},v_{2},\dots,v_{k-1},e_{k-1},v_{k}$
\end_inset

 in a graph 
\begin_inset Formula $G$
\end_inset

 is 
\emph on
steepest descent walk
\emph default
 if 
\begin_inset Formula $W(e_{i})\le W(\{v_{i},u\})$
\end_inset

 for all 
\begin_inset Formula $i\in\left[0,k-1\right]$
\end_inset

 and all 
\begin_inset Formula $u\in V$
\end_inset

 such that 
\begin_inset Formula $\{v_{i},u\}\in E$
\end_inset

.
\end_layout

\begin_layout Remark*
For a given initial state 
\begin_inset Formula $v_{0}$
\end_inset

 the evolution of the system can be represented as an infinite 
\emph on
steepest descent walk
\emph default
 
\begin_inset Formula $v_{0},e_{0},v_{1},e_{1},v_{2},\dots$
\end_inset


\end_layout

\begin_layout Definition*
A 
\emph on
steepest descent path
\emph default
 is a 
\emph on
steepest descent walk 
\emph default
with no repeating vertices except possibly the first and the last vertex.
\end_layout

\begin_layout Remark*
For every 
\emph on
steepest descent walk
\emph default
 there exist a 
\emph on
steepest descent path
\emph default
 containing the only the subset of the vertices and the edges of the 
\emph on
steepest descent walk.
\end_layout

\begin_deeper
\begin_layout Definition*
An edge between vertices 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 
\emph on
is locally minimal 
\emph default
if its weight is not larger than the weights of all edges containing either
 
\begin_inset Formula $u$
\end_inset

 or 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Definition*
A 
\emph on
regional minimum 
\emph default
of a graph is a connected component of the subgraph containing only the
 locally minimal edges
\emph on
 
\emph default
such that every possible steepest descent walk in 
\begin_inset Formula $G$
\end_inset

 starting in any of the vertices of the connected component
\emph on
 
\emph default
stays inside the component.
\end_layout

\begin_layout Theorem*
If the graph doesn't have any isolated vertices then every initial state
 of the system will, after a finite number of steps, be trapped into a regional
 minimum.
\end_layout

\begin_layout Proof
First 
\end_layout

\begin_deeper
\begin_layout Definition*
A 
\emph on
basin of attraction
\emph default
 of a 
\emph on
regional minimum
\emph default
 is a set of vertices from which there is a 
\emph on
steepest descent path
\emph default
 to every vertex of the 
\emph on
regional minimum
\emph default
.
\end_layout

\begin_deeper
\begin_layout Remark*

\emph on
Basins of attraction 
\emph default
of different 
\emph on
regional minima
\emph default
 can overlap.
 A vertex can belong to more than one 
\emph on
basin of attraction
\emph default
.
\end_layout

\begin_deeper
\begin_layout Definition*
A 
\emph on
border vertex
\emph default
 is part of more than one 
\emph on
basin of attraction.
\end_layout

\begin_deeper
\begin_layout Definition*
Let 
\begin_inset Formula $B$
\end_inset

 be a set of all 
\emph on
border vertices
\emph default
.
 For every 
\emph on
basin of attraction 
\emph default

\begin_inset Formula $A_{i}$
\end_inset

, the set 
\begin_inset Formula $A_{i}\backslash B$
\end_inset

 is defined as the 
\emph on
basin of strong (exclusive) attraction
\emph default
 of the same 
\emph on
regional minimum
\emph default
.
\end_layout

\begin_deeper
\begin_layout Definition*
The
\emph on
 
\emph default
watershed
\emph on
 
\emph default
transform of a graph is a collection of watershed domains, where a domain
 is a basin of strong (exclusive) attraction of a regional minimum.
 The border vertices are called the ridges of the watershed transform.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\end_deeper
\end_deeper
\end_deeper
\end_deeper
\begin_layout Remark*
If the edge weights of a graph are distinct, then the watershed transform
 will not have any ridges.
\end_layout

\begin_deeper
\begin_layout Remark*
All but isolated vertices will be assigned to a 
\emph on
domain
\emph default
.
\end_layout

\end_deeper
\begin_layout Section

\series bold
Standard watershed algorithm
\end_layout

\begin_layout Standard
The central quantity in the watershed algorithm is the steepest descent
 graph, defined as follows.
\end_layout

\begin_layout Definition*
Consider an undirected weighted graph 
\begin_inset Formula $G$
\end_inset

.
 Define the directed graph 
\begin_inset Formula $G'$
\end_inset

 in which each undirected edge of 
\begin_inset Formula $G$
\end_inset

 is replaced by both directed edges between the same vertices.
 The 
\emph on
steepest descent graph
\emph default
 
\begin_inset Formula $D$
\end_inset

 is a subgraph of 
\begin_inset Formula $G'$
\end_inset

 with the property that 
\begin_inset Formula $D$
\end_inset

 includes every edge of 
\begin_inset Formula $G'$
\end_inset

 with minimal weight of all edges outgoing from the same vertex.
 
\end_layout

\begin_layout Standard
A directed path in 
\begin_inset Formula $D$
\end_inset

 is a path of steepest descent in 
\begin_inset Formula $G$
\end_inset

, in the sense that every step is along an edge with locally minimal weight.
 The steepest ascent graph can be defined analogously using edges of maximal
 weight.
 The watershed algorithm is named because a drop of water is imagined to
 take a path of steepest descent on a landscape.
 Either steepest ascent or descent can be used without loss of generality.
\end_layout

\begin_layout Remark*
All the outgoing and bidirectional edges of a vertex of 
\begin_inset Formula $D$
\end_inset

 will have smaller weight than all incoming vertices.
\end_layout

\begin_deeper
\begin_layout Remark*
Every non-isolated vertex of 
\begin_inset Formula $D$
\end_inset

 will have at least one bidirectional or outgoing edge.
\end_layout

\begin_deeper
\begin_layout Remark*
The evolution of our stochastic descrete dynamics is equivalent to a random
 walk along the
\emph on
 steepest descent graph
\emph default
.
\end_layout

\end_deeper
\end_deeper
\begin_layout Definition*
A 
\emph on
saddle vertex
\emph default
 of the steepest descent graph has more than one outgoing edge.
\end_layout

\begin_deeper
\begin_layout Definition*
A 
\emph on
plateau
\emph default
 is a connected component of the subgraph of 
\begin_inset Formula $A$
\end_inset

 containing only bidirectional edges.
\end_layout

\begin_deeper
\begin_layout Remark*
The smallest possible plateau consists of two vertices, with a bidirectional
 edge between them.
\end_layout

\begin_deeper
\begin_layout Remark*
All the bidirectional edges inside a plateau will have the same weight.
\end_layout

\end_deeper
\begin_layout Definition*
A 
\emph on
plateau corner
\emph default
 is a 
\emph on
plateau 
\emph default
vertex with one or more outgoing edges
\emph on
.
\end_layout

\end_deeper
\end_deeper
\begin_layout Remark*
All the outgoing edges off all 
\emph on
plateau
\emph default
 corners of a single plateau have the same weight equal to all the bidirectional
 edges inside the plateau.
\end_layout

\begin_layout Definition*
A 
\emph on
locally minimal plateau 
\emph default
contains no 
\emph on
plateau corners.
 
\end_layout

\begin_layout Remark*
A locally minimal plateau of the steepest descent graph is the same as the
 regional minimum of the original graph.
\end_layout

\begin_layout Definition*
A 
\emph on
non-minimal plateau 
\emph default
contains at least one 
\emph on
plateau corner
\emph default
.
\end_layout

\begin_deeper
\begin_layout Definition*
A 
\emph on
compressed steepest descent multigraph 
\emph default
(CSDM) is obtained by collapsing 
\emph on
plateaus
\emph default
 into 
\emph on
super-vertices.

\emph default
 All the bidirectional edges inside the plateau are removed and all the
 incoming and outgoing edges are preserved.
\end_layout

\begin_layout Remark*
We will refer to the 
\emph on
super-vertices 
\emph default
obtained by collapsing 
\emph on
plateaus
\emph default
 as 
\emph on
locally minimal 
\emph default
and 
\emph on
non-minimal
\emph default
 
\emph on
super-vertex
\emph default
 accordingly.
\end_layout

\begin_deeper
\begin_layout Remark*
All the outgoing edges of a 
\emph on
super-vertex
\emph default
 will have the same weight, equal to all the bidirectional edges inside
 the plateau and smaller than the weight of all incoming vertices.
\end_layout

\begin_deeper
\begin_layout Remark*
The 
\emph on
compressed steepest descent multigraph 
\emph default
will contain no bidirectional edges.
 All but 
\emph on
locally minimal super-vertices
\emph default
 will have at least one outgoing edge.
\end_layout

\begin_deeper
\begin_layout Remark*
Every directed path in the CSDM will have strictly decreasing weights and
 will terminate in one of the 
\emph on
locally minimal super-vertices
\emph default
.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\end_deeper
\begin_layout Subsection
The standard watershed algorithm 
\end_layout

\begin_layout Enumerate
We create the 
\emph on
compressed steepest descent multigraph
\emph default
.
\end_layout

\begin_layout Enumerate
We reverse the directions of all the edges.
\end_layout

\begin_layout Enumerate
We visit the vertices (and super-vertices) in a topological order.
 When visiting a vertex we:
\end_layout

\begin_deeper
\begin_layout Itemize
If the vertex has no outgoing edges we assign a new unique domain ID to
 it.
\end_layout

\begin_layout Itemize
Otherwise, if all the vertices pointed to by the outgoing edges have the
 same ID we assign the current vertex that ID, otherwise we assign a special
 ID representing a border.
\end_layout

\end_deeper
\begin_layout Enumerate
We assign all the vertices of the original graph.
 The plateau vertices will be assigned to the same ID as the corresponding
 
\emph on
super-vertex
\emph default
.
\end_layout

\begin_layout Enumerate
*If there is a single unique domain assign all the vertices of the graph
 to that ID.
\end_layout

\begin_layout Theorem

\emph on
The algorithm 3.1 will:
\end_layout

\begin_layout Enumerate
Assign each vertex in 
\begin_inset Formula $G$
\end_inset

 a unique domain corresponding to the regional mimimim to which the system
 will evolve.
 If the system can evolve to multiple regional minima, the vertex will be
 marked as a ridge vertex.
\end_layout

\begin_layout Enumerate
The total number of domains will be equal to the number of 
\emph on
locally minimal plateaus
\emph default
 (
\emph on
regional minima)
\emph default
.
\end_layout

\begin_layout Enumerate
All vertices in a 
\emph on
locally minimal plateau 
\emph default
will be assigned to the same 
\emph on
domain
\emph default
.
 Vertices in different 
\emph on
locally minimal plateaus 
\emph default
will be assigned to different 
\emph on
domains
\emph default
.
\end_layout

\begin_layout Enumerate
All 
\emph on
Domains 
\emph default
will be connected.
\end_layout

\begin_layout Proof
The step 3 of the algorithm assigns a unique domain ID only to vertices
 with no outgoing edges.
 Only 
\emph on
locally minimal super-vertices
\emph default
 have no outgoing edges and therefore will be assigned a new unique ID.
 As they correspond to
\emph on
 locally minimal plateaus 
\emph default
every 
\emph on
locally minimal plateau
\emph default
 will be assigned a different ID and all the vertices in the 
\emph on
plateau
\emph default
 will be assigned to that same ID.
 As we visit the vertices in a topological order when visiting vertices
 that have outgoing edges all the vertices pointed to by those edges will
 already be visited and assigned.
 If they are all assigned to the same ID not equal to the special ID representin
g a border then we know that all the paths from the current vertex will
 terminate 
\end_layout

\begin_layout Corollary*
Every path of the steepest descent graph is a non-increasing and terminates
\end_layout

\begin_layout Lemma*

\emph on
Each vertex in 
\emph default

\begin_inset Formula $G$
\end_inset

 
\emph on
will be assigned to a unique domain corresponding to the closest regional
 minimum by minimax distance or will be designated as a border vertex.
 The total number of domains will be equal to the number of 
\emph default
locally minimal plateaus
\emph on
.
 
\emph default
All vertices in a 
\emph on
locally minimal plateau
\emph default
 
\emph on
will be assigned to the same 
\emph default
domain.
 
\emph on
Vertices in different l
\emph default
ocally minimal plateaus
\emph on
 will be assigned to different 
\emph default
domains
\emph on
.
 Domains will be connected.
\end_layout

\begin_layout Proof
Prove this.
\end_layout

\begin_layout Remark*
If the steepest descent graph contains no saddle vertices or non-minima
 plateaus with more than one plateau corner the watershed transform will
 yield no non-isolated border vertices.
\end_layout

\begin_deeper
\begin_layout Remark*
The isolated vertices of the original graph have an infinite distance to
 all the other vertices.
 If the graph contains only one 
\emph on
locally minimal plateau
\emph default
 we will have only one 
\emph on
domain, 
\emph default
and all the vertices including the isolated ones will be assigned to it.
 If the graph contains more than one 
\emph on
locally minimal plateau
\emph default
 the isolated vertices will be assigned as borders.
\end_layout

\begin_deeper
\begin_layout Remark*
All the vertices in a 
\emph on
non-minimal plateau 
\emph default
containing exactly one 
\emph on
plateau corner
\emph default
 will be assigned to the same domain as that corner, if the corner belongs
 to a domain, or as borders if the corner vertex is a border vertex.
\end_layout

\end_deeper
\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Remark*
The vertices in a 
\emph on
non-minimal plateau
\emph default
 with more than one 
\emph on
plateau corner 
\emph default
will be assigned the special ID representing a border.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Section
Assigning border vertices
\end_layout

\begin_layout Standard
The number of border vertices can be arbitrarily large.
 We would like to assign the non-isolated border vertices to the domains
 in some consistent and intuitive way.
 
\end_layout

\begin_layout Enumerate
Not have degeneracies - have a deterministic algorithm.
\end_layout

\begin_layout Enumerate
All domains should be connected.
\end_layout

\begin_layout Enumerate
Plateaus should be fairly divided.
\end_layout

\begin_layout Subsubsection*
Algorithm for dividing borders
\end_layout

\begin_layout Enumerate
We introduce an ordering function 
\begin_inset Formula $I$
\end_inset

 of a graph 
\begin_inset Formula $G=(V,E,W)$
\end_inset

.
 
\begin_inset Formula $I:V\to\{1,2,...,|V|\}$
\end_inset

 such that 
\begin_inset Formula $I(u)\neq I(v)$
\end_inset

 iff 
\begin_inset Formula $u\neq v$
\end_inset

.
 We'll refer to 
\begin_inset Formula $I(u)$
\end_inset

 as the index of 
\begin_inset Formula $u$
\end_inset

.
 
\end_layout

\begin_layout Enumerate
We then modify the steepest descent graph and the original graph in the
 following way:
\end_layout

\begin_deeper
\begin_layout Enumerate
For saddle vertices we keep only one outgoing edge pointing to 
\begin_inset Formula $u$
\end_inset

 with the minimal index.
\end_layout

\begin_layout Enumerate
We cut the non-minima plateaus with more than one plateau corner
\end_layout

\begin_deeper
\begin_layout Enumerate
For all non corner vertices that are we will keep a single bidirectional
 edge (explain a bit clearer)
\end_layout

\begin_layout Enumerate
We remove all edges that have the two vertices equidistant to two different
 plateau corners.
\end_layout

\end_deeper
\end_deeper
\begin_layout Theorem*

\emph on
The 
\emph default
standard watershed transform 
\emph on
of the modified graph will
\end_layout

\begin_layout Enumerate
Uniquely assign all non-isolated vertices to a domain.
\end_layout

\begin_layout Enumerate
A vertex inside a 
\emph on
non-minimal plateau
\emph default
 will be assigned to the same 
\emph on
domain
\emph default
 as one of the nearest 
\emph on
plateau corners
\emph default
.
\end_layout

\begin_layout Enumerate
The 
\emph on
minimax distance
\emph default
 from any vertex to its assigned 
\emph on
regional minimum
\emph default
 will not be changed by the graph modification.
 (There exists at least one minimax path of he original graph will remain
 in the modified graph).
 Remark: Minimax distances can not decrease (b/c we are only eliminating
 edges)
\end_layout

\begin_deeper
\begin_layout Enumerate
Remark: This is what the clames above mean: Every non-isolated border vertex
 of the original graph was equidistant from multiple regional minima.
 In the modified graph it has a unique closest regional minima with unchanged
 minimax distance.
 The distance to the other regional minima had increased.
\end_layout

\end_deeper
\begin_layout Proof
Sketch: 1) Show that there's always non-decreasing path from a local minima
 to a vertex.
 If there's a minimax path to two different local minima then we didn't
 actually split the plateaus.
 2) by design 3) by design of the algorithm, we visit the graph using BFS
 4) the value of the removed edges will still be there.
\change_inserted -190403614 1424288773

\end_layout

\begin_layout Section

\change_inserted -190403614 1424289064
Improving the watershed segmentation
\end_layout

\begin_layout Standard

\change_inserted -190403614 1424290190
The edges of the graph usually represent 
\emph on
affinities 
\emph default
or 
\emph on
dissafinities 
\emph default
- probabilities that the two vertices belong or don't belong to the same
 segment.
 The watershed transform will produce a domain for every regional minima.
 And slight noise in the data can therefore produce large number of domains.
 Our goal is to reduce the number of segments while still not getting mergers
 to improve the resulting segmentation.
 In order to do this we will modify the 
\emph on
dissafinity 
\emph default
graph for the confident values.
\end_layout

\begin_layout Subsection

\change_inserted -190403614 1424290209
Minimum threshold 
\begin_inset Formula $T_{\min}$
\end_inset


\end_layout

\begin_layout Standard

\change_inserted -190403614 1424290523
For very small values of 
\emph on
dissafinity
\emph default
 for which we are confident that the two vertices should belong to the same
 domain we will modify the 
\emph on
dissafinity 
\emph default
value to be as low as possible.
 Mainly we will modify the graph by replacing all edges with weight smaller
 than 
\begin_inset Formula $T_{\min}$
\end_inset

with an edge with weight 
\begin_inset Formula $0$
\end_inset

.
 This will reduce the number the number of domains as it will flatten the
 regions with small 
\emph on
dissafinities
\emph default
, reducing the noise.
\end_layout

\begin_layout Enumerate

\change_inserted -190403614 1424290541
Some regional minima will get merged into a larger one.
\end_layout

\begin_layout Enumerate

\change_inserted -190403614 1424290700
Other regional minima with the value larger or equal to 
\begin_inset Formula $T_{\min}$
\end_inset

 will stay.
\end_layout

\begin_layout Standard

\change_inserted -190403614 1424290742
\begin_inset Graphics
	filename Figures/raw.png

\end_inset

 
\begin_inset Graphics
	filename Figures/min.png

\end_inset


\end_layout

\begin_layout Subsection

\change_inserted -190403614 1424290760
Maximum threshold 
\begin_inset Formula $T_{\max}$
\end_inset


\end_layout

\begin_layout Standard

\change_inserted -190403614 1424291102
Similarly for very high values of dissafinity we can be confident that the
 two vertices don't belong to the same domain.
 We can therefore safely remove these edges from the graph.
 Removing edges with value larger than 
\begin_inset Formula $T_{\max}$
\end_inset

can prevent some mergers.
 Also in the case where the segments can have boundaries - vertices that
 shouldn't belong to any of the segments the maximum threshold will produce
 small or singleton segments where the boundaries should be.
\end_layout

\begin_layout Standard

\change_inserted -190403614 1424291467
\begin_inset Graphics
	filename Figures/minmax.png

\end_inset


\begin_inset Graphics
	filename Figures/singletons.png

\end_inset


\end_layout

\begin_layout Subsection

\change_inserted -190403614 1424291184
Chosing 
\begin_inset Formula $T_{\min}$
\end_inset

and 
\begin_inset Formula $T_{\max}$
\end_inset

 values
\end_layout

\begin_layout Standard

\change_inserted -190403614 1424291217
Not exact science :) get the largest possible values while not introducing
 mergers.
 Further modification can make this choice be looser.
\end_layout

\begin_layout Section
Domain graph and hierarchical clustering
\end_layout

\begin_layout Definition*
A 
\emph on
domain graph
\emph default
 
\begin_inset Formula $R=(D,E_{r},W_{r})$
\end_inset

 of a partitioned graph 
\begin_inset Formula $G$
\end_inset

 is an undirected weighted graph defined as follows 
\end_layout

\begin_layout Enumerate
The set of vertices 
\begin_inset Formula $D$
\end_inset

 is the set of domains/partitions of 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $E_{r}\subset D\times D$
\end_inset

.
\end_layout

\begin_layout Enumerate
The edge 
\begin_inset Formula $\{d_{a},d_{b}\}\in D\times D$
\end_inset

 exists iff 
\begin_inset Formula $d_{a}\neq d_{b}$
\end_inset

 and there exist an edge 
\begin_inset Formula $\{v_{x},v_{y}\}$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

 such that 
\begin_inset Formula $v_{x}$
\end_inset

 and 
\begin_inset Formula $v_{y}$
\end_inset

 are assigned to domains 
\begin_inset Formula $d_{a}$
\end_inset

 and 
\begin_inset Formula $d_{b}$
\end_inset

 accordingly.
\end_layout

\begin_layout Enumerate
The weight of the edge 
\begin_inset Formula $\{d_{a},d_{b}\}$
\end_inset

 is a real number determined by 
\begin_inset Formula $W_{r}(G,d_{a},d_{b})$
\end_inset

 where 
\begin_inset Formula $G$
\end_inset

 is the original graph and 
\begin_inset Formula $d_{a},$
\end_inset


\begin_inset Formula $d_{b}\subset V$
\end_inset

 are the sets of vertices of the two domains.
\end_layout

\begin_layout Definition*
A 
\emph on
standard? domain graph
\emph default
 is a 
\emph on
domain graph 
\emph default
with 
\begin_inset Formula $W_{r}(G,d_{a},d_{b})\equiv W_{\min}(G,d_{a},d_{b})\equiv\min\{W(\{u,v\}),u\in d_{a},v\in d_{b},\{u,v\}\in E\}$
\end_inset

.
 
\end_layout

\begin_deeper
\begin_layout Definition*
A 
\emph on
(standard) watershed domain graph
\emph default
 is a 
\emph on
(standard) 
\emph default
domain graph of a graph partitioned by the 
\emph on
watershed transform
\emph default
.
\end_layout

\begin_layout Remark*
The edges of the 
\emph on
standard watershed domain graph
\emph default
 will have the weight equal to the minimax distance in 
\begin_inset Formula $G$
\end_inset

 between the 
\emph on
regional minima
\emph default
 of the corresponding domains.
\end_layout

\begin_deeper
\begin_layout Remark*
The weights of the edges of the 
\emph on
standard
\emph default
 
\emph on
domain graph
\emph default
 of partitioned 
\begin_inset Formula $G$
\end_inset

 will have the value equal to the 
\emph on
dissaffinity
\emph default
 of the two closest members.
\change_inserted -190403614 1424202275

\end_layout

\end_deeper
\begin_layout Subsection
Single linkage hierarchical clustering
\end_layout

\end_deeper
\begin_layout Definition*
Given a graph 
\begin_inset Formula $G$
\end_inset

, hierarchical clustering treats each vertex as a singleton cluster, and
 successively merges clusters until all partitions have been merged into
 a single remaining cluster.
 A hierarchical clustering is often represented as a dendrogram
\change_inserted -190403614 1424199943
 [fig]
\change_unchanged
.
 Each merge operations produces a new graph partition at the given level
 of the hierarchy.
\end_layout

\begin_layout Standard
In 
\emph on
single linkage
\emph default
 hierarchical clustering in each step we merge two clusters whos
\change_inserted -190403614 1424199963
e
\change_unchanged
 two closest members have the smallest 
\emph on
disaffinity
\emph default
.
\end_layout

\begin_layout Remark*
In each step of the 
\emph on
single linkage clustering 
\emph default
the values of the 
\emph on
smallest disaffinity
\emph default
 for which we merge the clusers will be non-decreasing.
\end_layout

\begin_layout Claim*
The graph partitioning obtained by 
\emph on
single linkage
\emph default
 clustering by merging clusters until the next smallest 
\emph on
disaffinity
\emph default
 is greater or equal to some threshold 
\begin_inset Formula $T$
\end_inset

 will be equivalent to the partitioning obtained by obtaining the connected
 components of the thresholded graph, where we only keep edges with weight
 smaller than 
\begin_inset Formula $T$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Subsection
Relation between 
\emph on
single linkage clustering and the watershed transform
\change_inserted -190403614 1424200390

\end_layout

\end_deeper
\begin_layout Claim*

\change_inserted -190403614 1424202535
Explicitly explain that this is for a level of the hierarchical clustering.
 
\end_layout

\begin_layout Claim*

\change_inserted -190403614 1424202542
Graph partitioning is obtained by CC.
 
\end_layout

\begin_layout Claim*
Often a segmentation is produced using 
\emph on
single linkage
\emph default
 
\emph on
clustering
\emph default
 - connected components of the thresholded graph.
 An obvious problem there is that this method can produce a lot of clusters.
 Each vertex with that has no edge with the weight smaller than 
\begin_inset Formula $T$
\end_inset

 will be in its own segment.
 A method to reduce the number of small, singleton clusters is to apply
 the watershed transform on the resulting 
\emph on
domain graph
\emph default
.
\end_layout

\begin_layout Theorem*
For a given threshold 
\begin_inset Formula $T$
\end_inset

, the following three methods will produce the same partitioning of 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Enumerate
First partition the graph by finding the connected components of the thresolded
 
\begin_inset Formula $G$
\end_inset

 and then applying watershed on the resulting domain graph.
\end_layout

\begin_layout Enumerate
Applying the watershed transform on 
\begin_inset Formula $G$
\end_inset

, and then finding the connected components of the thresholded watershed
 domain graph.
\end_layout

\begin_layout Enumerate
Replacing all the edges with weight smaller than 
\begin_inset Formula $T$
\end_inset

 with an edge of weight 
\begin_inset Formula $0$
\end_inset

 and then applying the watershed transform.
\end_layout

\begin_layout Proof
Prove this!
\change_inserted -190403614 1424200250

\end_layout

\begin_layout Proof

\change_inserted -190403614 1424200266
Explain why we want Watershed and then CC.
 or sometimes 3)
\change_unchanged

\end_layout

\begin_layout Section
Methods for agglomerative clustering
\end_layout

\begin_layout Standard
Often a prior knowledge about the nature of the data can be used to improve
 the segmentation.
 In this section we introduce several efficient methods.
\end_layout

\begin_layout Subsection

\change_deleted -190403614 1424291322
Segment boundaries
\end_layout

\begin_layout Standard

\change_deleted -190403614 1424291322
The nature of the data can be such that there is space between desired segments
 - segment boundaries.
 The values of the 
\emph on
dissafinities
\emph default
 among vertices on the segment boundaries will be very high.
 However the watershed transform will assign each non-isolated vertex to
 a domain.
 
\end_layout

\begin_layout Standard

\change_deleted -190403614 1424291322
An intuitive way to improve the segmentation in this case is to remove all
 edges from the graph whose weight is higher than some pre-defined threshold
 
\begin_inset Formula $T_{\max}$
\end_inset

.
 Mainly, for 
\emph on
dissafinities 
\emph default
higher than 
\begin_inset Formula $T_{\max}$
\end_inset

we are confident that those edges of the graph should never be used when
 obtaining the segmentation.
\change_unchanged

\end_layout

\begin_layout Subsection
Segment properties
\change_inserted -190403614 1424201094
 (modification of single linkage clustering + explain the relationship)
\change_unchanged

\end_layout

\begin_layout Standard
In many cases some properties of the desired segments are known.
 For example, when segmenting neural tissue we can estimate the minimal
 size of the segments inside a given volume.
\end_layout

\begin_layout Definition*
A non-decreasing property 
\begin_inset Formula $P:2^{V}\to R^{+}$
\end_inset

 is a function of a segment such that 
\begin_inset Formula $P(S)\le P(S\cup v)$
\end_inset

.
 Similarly we can define non-increasing properties.
\end_layout

\begin_layout Remark*
Exmple of non-decresing properties are size (number of vertices) in the
 segment, bounding box volume (in the case of volumetric affinity graphs),
 etc...
\change_inserted -190403614 1424197356

\end_layout

\begin_layout Proposition*

\change_inserted -190403614 1424197463
Given a property 
\begin_inset Formula $P$
\end_inset

 and prior knowledge about the data - 
\begin_inset Formula $P(S)\ge P_{\min}$
\end_inset

.
 We propose the following method to improve the segmentation.
\end_layout

\begin_layout Enumerate

\change_inserted -190403614 1424197832
We consider all the edges of the standard domain graph in non-decreasing
 order.
\end_layout

\begin_layout Enumerate

\change_inserted -190403614 1424197670
If the edge is connecting two different segments 
\begin_inset Formula $S_{1}$
\end_inset

 and 
\begin_inset Formula $S_{2}$
\end_inset

 and if either 
\begin_inset Formula $P(S_{1})<P_{\min}$
\end_inset

or 
\begin_inset Formula $P(S_{2})<P_{\min}$
\end_inset

.
 We merge the segments 
\begin_inset Formula $S_{1}$
\end_inset

and 
\begin_inset Formula $S_{2}$
\end_inset

.
\end_layout

\begin_layout Claim*

\change_inserted -190403614 1424197746
In the algorithm described above it is enough to consider just the edges
 of the minimum cost spanning forest of the domain graph.
\end_layout

\begin_layout Proof

\change_inserted -190403614 1424197753
Simple...
\end_layout

\begin_layout Proof

\change_inserted -190403614 1424201115
The method above does not take into account the wights of the edges of the
 domain graph.
 P_min as function of the weight.
\change_unchanged

\end_layout

\begin_layout Subsection
Watershed hierarchical segmentation
\end_layout

\begin_layout Definition*
A 
\emph on
watershed domain forest
\emph default
 is a 
\emph on
minimum cost spanning forest 
\emph default
of 
\begin_inset Formula $R$
\end_inset

, which is a union of 
\emph on
minimum cost spanning trees
\emph default
 of its connected components.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Algorithm for computing the forest.
 Then explain that the forest implies a hierarchical segmentation.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
Applying standard techniques for weighted graph clustering on the watershed
 domain graph we obtain the watershed hierarchical segmentation.
 We can do this in the following way: we consider all the edges in the watershed
 domain graph in decreasing order.
 If the edge is connecting two different domains we merge the two domains
 into a new domain.
 The resulting partitioning of the graph will be our new level of hierarchical
 segmentation.
 This algorithm is equivalent to the Kruskal's algorithm for obtaining the
 maximum cost spanning forest so we can get both the hierarchical segmentation
 and the watershed domain forest at the same cost.
\end_layout

\begin_layout Remark*
In the special case when 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $W_{r}(C_{a,b})$
\end_inset

 is equal to the minimal value of all the edges in 
\begin_inset Formula $C_{a,b}$
\end_inset

we can obtain the watershed domain forest and the watershed hierarchical
 transform without creating the watershed domain graph by considering all
 the edges of the original graph 
\begin_inset Formula $G$
\end_inset

 in decreasing order and applying the same technique as above.
 Note this is computationally more expensive (log factor).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Remark*
The edges of the watershed domain forest will be a subset of a minimum spanning
 forest of the original graph.
 Not explained correctly, need better statement here.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Section
Agglomerative hierarchical clustering
\end_layout

\begin_layout Standard
Often the result of the 
\emph on
watershed transform 
\emph default
will produce an oversegmentation.
 We will apply single-linkage clustering methods on the 
\emph on
watershed domain graph
\emph default
.
 The 
\emph on
watershed domains
\emph default
 will represent the clusters and the weights of the edges of the 
\emph on
watershed domain graph 
\emph default
will represent the distance between the clusters.
\end_layout

\begin_layout Definition*
A
\emph on
 minimax
\emph default
 
\emph on
path
\emph default
 between two vertices of a graph is a minimum with respect to paths between
 the two vertices of the maximal weight of edges on the path.
\end_layout

\begin_deeper
\begin_layout Definition*
The
\emph on
 minimax distance
\emph default
 
\begin_inset Formula $d(u,v)$
\end_inset

 between two vertices 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 is equal to the maximal edge weight on a 
\emph on
minimax path
\emph default
 between the vertices.
 If no path between the two vertices exists, then 
\begin_inset Formula $d(u,v)=\infty$
\end_inset

.
 The 
\emph on
minimax 
\emph default
distance of a vertex to itself is defined to be 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Definition*
The 
\emph on
watershed domains 
\emph default
are the basins of attraction of the 
\emph on
regional minima
\emph default
.
 
\end_layout

\begin_layout Definition*
- In the special case when the edge weight is chosen to be the minimum of
 ....
 
\end_layout

\begin_layout Definition*
edge weight domain graph corresponds to the minimax distance between any
 two pairs of points of the regional minima (between regional minima)
\end_layout

\begin_layout Definition*
- more efficient
\end_layout

\begin_layout Standard
*difference between MCST.
 MCST has more information than the dendrogram.
 MCST -> dendrogram.
 Kruskal's more powerful.
\end_layout

\begin_layout Standard
* two domains are in the same cluster iff the minmax distance between the
 regional minima 
\end_layout

\begin_layout Standard
1) Relate CC of the two graphs
\end_layout

\begin_layout Standard
2) Relate the MST of the two graphs
\end_layout

\begin_layout Standard
3) Watershed on the domain graph on CC is the same as CC on the watershed
 domain graph
\end_layout

\begin_layout Standard
In the case of segmentation, very often the edges of the given graph represent
 
\emph on
disaffinities
\emph default
 - the measure of the likelihood that the two vertices have similar characterist
ics, belong to the same segment.
 Without losing generality we will assume that the small values mean high
 likelihood.
 A slight noise in the affinity values can lead to large number of regional
 minima producing large number of watershed domains.
 We introduce modifications to the standard watershed algorithm to deal
 with such noise.
\end_layout

\begin_layout Subsection
Maximum threshold
\end_layout

\begin_layout Enumerate
Without losing generality, affinities take values [0,1] representing probabiliti
es of two vertices not belonging to the same segment.
\end_layout

\begin_layout Enumerate
We expect segment boundaries - vertices separating segments, not assigned
 to any segment.
\end_layout

\begin_layout Enumerate
We are confident that the disaffinities larger than some value 
\begin_inset Formula $T_{\max}$
\end_inset

 should never be used to assign vertices to the same domain.
\end_layout

\begin_layout Subsection
Minimum threshold
\end_layout

\begin_layout Enumerate
Noisy data produces large number of regional minima and therefore large
 number of watershed domains.
\end_layout

\begin_layout Enumerate
The hierarchical segmentation is useful only for a subset of thresholds,
 we'll never use the hierarchical segmentation with a threshold smaller
 than some value
\end_layout

\begin_layout Enumerate
A level of the hierarchical segmentation is obtained by merging watershed
 domains starting from the watershed domain graph.
\end_layout

\begin_layout Enumerate
We can always increase the threshold, but never decrease (we have to recompute
 the domain graph starting from the original graph)
\end_layout

\begin_layout Enumerate
Solutions
\end_layout

\begin_deeper
\begin_layout Enumerate
Do watershed transform and then compute the minimal level of the hierarchical
 segmentation
\end_layout

\begin_layout Enumerate
Introduce the threshold before the watershed transform by replacing all
 the edges....
\end_layout

\end_deeper
\begin_layout Subsection
Relation to connected components
\end_layout

\begin_layout Standard
An often used method for segmentation is applying connected components on
 a thresholded graph.
 The resulting segmentation might produce a lot of isolated vertices.
 Applying the watershed transform after introducing the minimum threshold
 will produce a similar segmentation where all vertices will be assigned
 either by growing existing connected components of the thresholded graph
 or by introducing new segments.
\end_layout

\begin_layout Standard
Each connected component of the thresholded graph will be a subset-equals
 to a single domain obtained by watershed followed by thresholding the domain
 graph to the same threshold.
\end_layout

\begin_layout Standard
Doing marker based watershed which is not defined would be equivalent to
 doing marker based watershed on the domain graph after thresholding it.
\end_layout

\begin_layout Standard
Two domains of the tresholded domain graph will be in the same connected
 component iff the two regional minima are in the same connected component
 of the orginial graph.
\end_layout

\begin_layout Subsection
Minimum and maximum thresholds
\end_layout

\begin_layout Standard
The first modification of the watershed algorithm is by introducing minimum
 threshold 
\begin_inset Formula $T_{min}$
\end_inset

 and maximum threshold 
\begin_inset Formula $T_{max}$
\end_inset

.
 Given an undirected graph 
\begin_inset Formula $G$
\end_inset

, define the modified graph 
\begin_inset Formula $M$
\end_inset

 in which each edge of 
\begin_inset Formula $G$
\end_inset

 erased if its value is larger than 
\begin_inset Formula $T_{max}$
\end_inset

 and replaced by an edge with a value 
\begin_inset Formula $0$
\end_inset

 if its value is smaller than 
\begin_inset Formula $T_{min}$
\end_inset

.
 The first modified watershed transform of 
\begin_inset Formula $G$
\end_inset

 using thresholds 
\begin_inset Formula $T_{min}$
\end_inset

 and 
\begin_inset Formula $T_{max}$
\end_inset

 is the standard watershed transform of the graph 
\begin_inset Formula $M'$
\end_inset

 produced from 
\begin_inset Formula $G$
\end_inset

 as described above.
\end_layout

\begin_layout Standard
Rebalancing the dendrogram
\end_layout

\begin_layout Subsection
Other interpretation of the minimum threshold
\end_layout

\begin_layout Definition*
The size of a domain 
\begin_inset Formula $d$
\end_inset

, 
\begin_inset Formula $S_{d}$
\end_inset

 is equal to the number of vertices in 
\begin_inset Formula $G$
\end_inset

 assigned to that domain.
\end_layout

\begin_layout --Separator--
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
Given a 
\emph on
watershed transform 
\emph default

\begin_inset Formula $(G,S,s)$
\end_inset

 we define..
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Remark
In the steepest ascent graph there is a path from every vertex to at least
 one local maxima.
\end_layout

\begin_layout Enumerate
Steepest ascent graph.
 
\end_layout

\begin_layout Enumerate
Plateau division.
 
\end_layout

\begin_layout Enumerate
Region graph
\end_layout

\begin_layout Enumerate
hierarchical segmentation
\end_layout

\begin_layout Standard
The algorithm will produce a set of segments 
\begin_inset Formula $S$
\end_inset

 and a mapping function 
\begin_inset Formula $F_{s}:V\to S$
\end_inset

.
 Our algorithm has linear complexity (in number of edges in the graph) and
 resolves the degeneracy issue.
 
\end_layout

\begin_layout Subsection

\series bold
Steepest ascent graph
\end_layout

\begin_layout Standard
The steepest ascent graph 
\begin_inset Formula $A$
\end_inset

 is constructed from 
\begin_inset Formula $G$
\end_inset

 as follows.
 Loop over all edges 
\begin_inset Formula $(u,v)$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
 If the weight of 
\begin_inset Formula $(u,v)$
\end_inset

 is equal to the maximal weight of all edges in 
\begin_inset Formula $G$
\end_inset

 containing 
\begin_inset Formula $u$
\end_inset

, include the edge 
\begin_inset Formula $u\rightarrow v$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

.
 If the weight of 
\begin_inset Formula $(u,v)$
\end_inset

 is equal to the maximal weight of all edges in 
\begin_inset Formula $G$
\end_inset

 containing 
\begin_inset Formula $v$
\end_inset

, include the edge 
\begin_inset Formula $u\leftarrow v$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
If both edges 
\begin_inset Formula $u\rightarrow v$
\end_inset

 and 
\begin_inset Formula $u\leftarrow v$
\end_inset

 are included in 
\begin_inset Formula $A$
\end_inset

, we will refer to them together as a bidirectional edge.
 The edges of any vertex of 
\begin_inset Formula $A$
\end_inset

 can be categorized as outgoing, incoming, or bidirectional with respect
 to that vertex.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/Watershed First Steps.png
	width 10cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
a
\series default
 Weighted undirected graph 
\series bold
b
\series default
 steepest ascent graph 
\series bold
c
\series default
 Regular plateau vertices (purple) vs.
 corner vertices (pink) 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plateau division
\end_layout

\begin_layout Standard
In the next step we will divide non-maxima plateaus based on the distance.
 Vertices with only bi-directional edges are situated on a plateau (either
 maximal or non-maximal).
 A vertex with a mixture of purely outgoing edges and bi-directional edges
 is defined as a corner of the non-maximal plateaus.
 These vertices will belong to the same segment as any of the vertices on
 the other end of the purely outgoing edges.
 In the following step we locate all the vertices on the corners of non-maximal
 plateaus and for each of them we will pick a single purely outgoing edge
 to keep and remove all the other edges.
 If the vertex has more than one purely outgoing edges we can employ different
 strategies in picking one of the outgoing edges.
 Picking any of the outgoing edges will produce correct watershed transform
 and will correctly deal with the degeneracy case.
 We chose to pick one at random.
 In this step we have assigned the corners of the non-maximal plateaus to
 corresponding segments.
 The modified graph will have the same properties [figure].
 We repeat the procedure until there are no more vertices with both purely
 outgoing and bi-directional edges.
 This procedure can be applied efficiently by simple BFS search through
 the graph [ref explanation?].
\end_layout

\begin_layout Subsection
Segmentation
\end_layout

\begin_layout Standard
The final modified graph [figure 1d] will uniquely define the watershed
 transform.
 The directional edges represent the relation of belonging to the same final
 segment.
 Running connected components [ref] algorithm on the final graph, while
 ignoring the directionality of the edges will give us the final watershed
 transform [figure 1e] with 
\begin_inset Formula $S$
\end_inset

 being the set of connected components and 
\begin_inset Formula $F_{s}$
\end_inset

 being the function that maps a vertex to its connected component
\end_layout

\begin_layout Standard
The method described above needs to visit every edge constant number of
 times, and is therefore linear in the number of edges.
 In the case of affinity graphs, where the number of edges is constant function
 of the number of vertices we get that our method performs in linear time
 on the number of vertices.
\end_layout

\begin_layout Subsection

\series bold
Region Graph
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $S$
\end_inset

 and 
\begin_inset Formula $F_{s}$
\end_inset

, we define the region graph of the segmentation 
\begin_inset Formula $G_{s}=(S,E_{s},W_{s})$
\end_inset

 such that for every 
\begin_inset Formula $e_{s}=\{s_{u},s_{v}\}\in E_{s}$
\end_inset

 there exist an edge 
\begin_inset Formula $e=\{u,v\}\in E$
\end_inset

 in the original graph such that 
\begin_inset Formula $F_{s}(u)=s_{u}$
\end_inset

 and 
\begin_inset Formula $F_{s}(v)=s_{v}$
\end_inset

 and for every other edge 
\begin_inset Formula $e'=\{u',v'\}\in E$
\end_inset

 such that 
\begin_inset Formula $F_{s}(u')=s_{u}$
\end_inset

 and 
\begin_inset Formula $F_{s}(v')=s_{v}$
\end_inset

 it must be true that 
\begin_inset Formula $W(e')\le W(e)$
\end_inset

.
 Furthermore we assign the weight of the edge 
\begin_inset Formula $W'(e_{s})=W(e)$
\end_inset

.
 Note that the region graph is also a weighted graph on which we can recursively
 apply the watershed algorithm.
 More about that in the next section.
 The algorithm for obtaining the region graph is straight forward.
 We consider all original edges connecting vertices in different segments.
 For every pair of segments we keep the edge with the highest value.
 Using a simple hash-map [ref] we can obtain the region graph in 
\begin_inset Formula $O(E)$
\end_inset

.
\end_layout

\begin_layout Standard
Note that the number of segments (watershed domains) in the segmentation
 will be equal to the number of local maxima in the original graph.
 Every watershed domain will have it's local maxima [ref].
 The region graph will have the following interesting property - the edges
 of the region graph will be maximin edges between the local maxima of the
 connected segments.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Subsection
Hierarchical Segmentation
\end_layout

\begin_layout Standard
A hierarchical segmentation is a set of segmentations at different detail
 levels in which the segmentations at coarser detail levels can be produced
 from simple merges of segments from segmentations at ﬁner detail levels.
 Therefore, the segmentations at ﬁner levels are nested with respect to
 those at coarser levels.
 Hierarchical methods have the interesting property of preserving neighboring
 information among segmented regions [ref].
 A hierarchy can be represented with a spanning tree [ref Zahn].
 Starting from the set of segments produced by our watershed transform,
 we create a hierarchical segmentation by finding the maximum cost spanning
 tree of the region graph.
\end_layout

\begin_layout Section
Modified Algorithm
\end_layout

\begin_layout Standard
As the number of watershed domains depends on the number of local maxima
 of the graph, noisy data would produce a large number of small segments.
 In this section we propose a modification of the original watershed algorithm
 that will deal with possible noisy input, as well as, take advantage of
 the prior knowledge of the data.
 We focus on segmenting neural tissue data using affinity graphs obtained
 by CNN [ref], but the approach can be used for other application with little
 or no modification.
\end_layout

\begin_layout Subsection
Min and Max Thresholds
\end_layout

\begin_layout Standard
The edges of affinity graphs represent probabilities of the two vertices
 belonging to same segment.
 As a first and natural modification we introduce Min and Max thresholds.
 Mainly we modify the graph such that all the edges with value 
\begin_inset Formula $W(e)\ge T_{max}$
\end_inset

 get a new value 
\begin_inset Formula $W(e)=\infty$
\end_inset

, and all the edges with 
\begin_inset Formula $W(e)<T_{min}$
\end_inset

 get a new value 
\begin_inset Formula $W(e)=-\infty$
\end_inset

.
 In the case of affinity graphs instead of 
\begin_inset Formula $\infty$
\end_inset

 and 
\begin_inset Formula $-\infty$
\end_inset

 we use 0 and 1.
 This can be done by a single pass through the edges 
\begin_inset Formula $O(E)$
\end_inset

 and therefore does not increase the running time of the original algorithm.
 By applying the Min and Max threshold we flatten the input near the minimal
 and maximal values and reduce the number of local minima.
 As shown on [figure 2] the number of segments dramatically reduces, however
 we still have to deal with the noise between the two threshold values.
\end_layout

\begin_layout Subsection
Size Thresholds
\end_layout

\begin_layout Standard
As in the case of segmenting electron microscopy images of neural tissue,
 quite often we have a prior knowledge about the minimal size of the segments
 in the desired segmentation.
 The voxel in the center of the volume belongs to a neuron either fully
 contained in the volume in which case we can guarantee that the segment
 it belongs to is at least the size of the minimal neuron [figure 3a].
 Alternatively it can belong to a cell partially contained in the volume
 in which case we can guarantee that the minimal size is equal to the distance
 to the edge of the volume times the minimal width of the process [figure
 3b].
\end_layout

\begin_layout Standard
We propose the following simplified modification (or rather extension?)
 of the watershed algorithm in order to produce better segmentation based
 on the prior knowledge about the size of the desired segments.
 We observe the edges of the region graph in decreasing order.
 The higher value of the edge means higher probability of the two segments
 actually belonging to a single larger segment.
 If any of the two segments connected by the observed edge is smaller than
 
\begin_inset Formula $T_{size}$
\end_inset

 we merge the two segments into a new one with the size equal to the sum
 of the sizes of the two segments.
 Further we never consider edges with the value smaller than 
\begin_inset Formula $T_{size,min}$
\end_inset

.
\end_layout

\begin_layout Subsection
Arbitrary Function of an Arbitrary Property Threshold
\end_layout

\begin_layout Subsection
Recursive Application of the Modified Algorithm
\end_layout

\begin_layout Section
Modified metric
\end_layout

\begin_layout Standard
We start by introducing an ordering function 
\begin_inset Formula $O$
\end_inset

 of a graph 
\begin_inset Formula $G=(V,E,W)$
\end_inset

.
 
\begin_inset Formula $O:V\to N$
\end_inset

 such that 
\begin_inset Formula $O(u)\neq O(v)$
\end_inset

 iff 
\begin_inset Formula $u\neq v$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition

\emph on
A minimax graph distance 
\emph default

\begin_inset Formula $g(u,v)$
\end_inset

 between two vertices is equal to the number of edges on the shortest 
\emph on
minimax path
\emph default
 between 
\begin_inset Formula $u$
\end_inset

and 
\begin_inset Formula $v$
\end_inset

.
 If 
\begin_inset Formula $u=v$
\end_inset

 then 
\begin_inset Formula $g(u,v)=0$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition

\emph on
A minimax graph distance 
\emph default

\begin_inset Formula $g(u,v)$
\end_inset

 between two vertices is equal to the number of maximum weight edges on
 the 
\emph on
minimax path
\emph default
 between 
\begin_inset Formula $u$
\end_inset

and 
\begin_inset Formula $v$
\end_inset

 such that that number is minimized.
 If 
\begin_inset Formula $u=v$
\end_inset

 then 
\begin_inset Formula $g(u,v)=0$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Theorem

\emph on
When 
\begin_inset Formula $\epsilon\to0$
\end_inset

 then 
\begin_inset Formula $\alpha(u,v)=d(u,v)+\epsilon g(u,v)$
\end_inset

 is a metric.
\end_layout

\begin_layout Theorem
\begin_inset Formula $\alpha(x,y)\ge0$
\end_inset

 obvious
\end_layout

\begin_layout Theorem
\begin_inset Formula $\alpha(x,x)=0$
\end_inset

 obvious
\end_layout

\begin_layout Theorem
\begin_inset Formula $\alpha(x,y)=\alpha(y,z)$
\end_inset

 obvious
\end_layout

\begin_layout Theorem
\begin_inset Formula $\alpha(x,z)\le\alpha(x,y)+\alpha(y,z)$
\end_inset

, 
\end_layout

\begin_layout Definition

\emph on
An ordering distance 
\emph default
between two vertices 
\begin_inset Formula $u$
\end_inset

and 
\begin_inset Formula $v$
\end_inset

is defined as follows:
\end_layout

\begin_layout Definition
\begin_inset Formula $n(u,v)=\begin{cases}
0 & u=v\\
\max\left\{ O(u),O(v)\right\}  & u\neq v
\end{cases}$
\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
We introduce a new metric 
\begin_inset Formula $m(u,v)=d(u,v)+\epsilon g(u,v)+\epsilon^{2}n(u,v)$
\end_inset


\end_layout

\begin_layout Remark*
Theorem about being a metric.
 As sum of metrics
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Remark*
Theorem: When 
\begin_inset Formula $\epsilon\to0$
\end_inset

, 
\begin_inset Formula $m(a,b)\neq m(a,c)$
\end_inset

 iff 
\begin_inset Formula $a\neq b\neq c$
\end_inset

.
 Which means no border vertices, and every vertex will uniquely be assigned
 to one of the markers.
 
\end_layout

\begin_layout Remark*
For a give finite graph and weight function there exist a sufficiently small
 epsilon such that above.
\end_layout

\begin_layout Remark*
TODO: describe the modified algorithm.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset


\end_layout

\end_body
\end_document
